import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { usePlannerContext } from '../context/PlannerContext';
import { Input } from '../components/ui/Input';
import { ModeToggle } from '../components/ModeToggle';
import { TodayCard } from '../components/TodayCard';
import { PlanCalendar } from '../components/PlanCalendar';
import { PlannerSummary } from '../components/PlannerSummary';
import { SpendControls } from '../components/SpendControls';
export function DashboardPage() {
    const { state: { monthlyIncome, recurring, extraSavings, days, mode, spendToday, spendLocked }, plan, loading, updateField, updateSpend, applySpend, resetSpend, } = usePlannerContext();
    const handleNumberChange = (field) => (event) => {
        const raw = event.target.value.replace(',', '.');
        const value = raw === '' ? 0 : Number.parseFloat(raw);
        updateField(field, Number.isNaN(value) ? 0 : value);
    };
    return (_jsxs("div", { className: "space-y-10", children: [_jsx("section", { className: "rounded-3xl bg-white p-8 shadow-soft", children: _jsxs("div", { className: "grid gap-10 lg:grid-cols-[1.2fr_0.8fr]", children: [_jsxs("div", { className: "space-y-6", children: [_jsxs("header", { className: "space-y-2", children: [_jsx("span", { className: "inline-flex items-center gap-2 rounded-full bg-[#eef1ff] px-3 py-1 text-xs font-semibold text-allow-primary", children: "Passo 1 \u2014 Inserisci i tuoi numeri" }), _jsx("h1", { className: "text-3xl font-bold text-slate-800", children: "Basta complicazioni: qui metti i soldi che hai e quanto ti serve ogni mese." }), _jsx("p", { className: "text-sm text-slate-500", children: "Compila questi tre campi e lascia che Allowday faccia i conti. Non serve essere esperti: ti diciamo solo quanto puoi spendere oggi." })] }), _jsxs("div", { className: "grid gap-4 md:grid-cols-2", children: [_jsx(FieldCard, { title: "Stipendio mensile netto", description: "L\u2019importo che ricevi ogni mese in busta paga.", children: _jsx(Input, { type: "number", inputMode: "decimal", min: 0, step: "0.01", prefix: "\u20AC", value: monthlyIncome, onChange: handleNumberChange('monthlyIncome'), containerClassName: "h-12 bg-[#f7f8fe]", className: "text-lg" }) }), _jsx(FieldCard, { title: "Spese fisse al mese", description: "Affitto, mutuo, bollette e imprevisti sicuri.", children: _jsx(Input, { type: "number", inputMode: "decimal", min: 0, step: "0.01", prefix: "\u20AC", value: recurring, onChange: handleNumberChange('recurring'), containerClassName: "h-12 bg-[#f7f8fe]", className: "text-lg" }) }), _jsx(FieldCard, { title: "Risparmi extra (facoltativi)", description: "Se vuoi includere un fondo cuscinetto, inseriscilo qui.", children: _jsx(Input, { type: "number", inputMode: "decimal", min: 0, step: "0.01", prefix: "\u20AC", value: extraSavings, onChange: handleNumberChange('extraSavings'), containerClassName: "h-12 bg-[#f7f8fe]", className: "text-lg" }) }), _jsx(FieldCard, { title: "Per quanti giorni vuoi che duri?", description: "Scegli l\u2019orizzonte del tuo piano.", children: _jsx(Input, { type: "number", inputMode: "numeric", min: 1, step: "1", suffix: "giorni", value: days, onChange: handleNumberChange('days'), containerClassName: "h-12 bg-[#f7f8fe]", className: "text-lg" }) }), _jsx(FieldCard, { title: "Come preferisci recuperare gli sforamenti?", description: "Soft = spalma tutto, Hard = recupero immediato.", children: _jsx(ModeToggle, { value: mode, onChange: (value) => updateField('mode', value) }) })] })] }), _jsxs("aside", { className: "rounded-3xl bg-[#fdf2f3] p-6", children: [_jsx("h2", { className: "text-lg font-semibold text-allow-primary", children: "Promemoria veloce" }), _jsxs("ul", { className: "mt-4 space-y-3 text-sm text-slate-500", children: [_jsxs("li", { children: [_jsx("strong", { className: "text-slate-700", children: "1." }), " Inserisci stipendio e spese fisse una sola volta: li salviamo in modo sicuro."] }), _jsxs("li", { children: [_jsx("strong", { className: "text-slate-700", children: "2." }), " Ogni mattina registra quanto spendi: un click e il calendario si aggiorna."] }), _jsxs("li", { children: [_jsx("strong", { className: "text-slate-700", children: "3." }), " Verde significa \u201Cok\u201D, giallo \u201Cvai piano\u201D, rosso \u201Cstop\u201D. Semplice."] })] })] })] }) }), _jsxs("section", { className: "grid gap-6 lg:grid-cols-[1.1fr_0.9fr]", children: [_jsxs("div", { className: "rounded-3xl bg-white p-6 shadow-soft", children: [_jsx(PlannerSummary, { plan: plan }), _jsxs("div", { className: "mt-8 space-y-4 rounded-2xl bg-[#f7f8fe] p-6", children: [_jsxs("div", { className: "flex flex-col gap-2 sm:flex-row sm:items-end sm:justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm font-semibold text-slate-700", children: "Quanto hai speso oggi?" }), _jsx("p", { className: "text-xs text-slate-500", children: "Somma anche i piccoli caff\u00E8: registriamo tutto noi." })] }), _jsx("div", { className: "w-full max-w-xs", children: _jsx(Input, { type: "number", inputMode: "decimal", min: 0, step: "0.01", prefix: "\u20AC", value: spendToday, onChange: handleNumberChange('spendToday'), containerClassName: "h-12", className: "text-lg" }) })] }), _jsx(SpendControls, { onApply: () => {
                                            void applySpend();
                                        }, onReset: resetSpend, onQuickAdd: (amount) => updateSpend(amount), disabled: spendToday <= 0 || loading })] })] }), _jsxs("div", { className: "space-y-6", children: [_jsx(TodayCard, { plan: plan, spendToday: spendToday, spendLocked: spendLocked }), _jsx(PlanCalendar, { plan: plan })] })] })] }));
}
function FieldCard({ title, description, children }) {
    return (_jsxs("div", { className: "flex flex-col gap-3 rounded-3xl border border-slate-100 bg-white p-5 shadow-soft", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm font-semibold text-slate-700", children: title }), _jsx("p", { className: "text-xs text-slate-400", children: description })] }), children] }));
}
